name: cd-prod-with-docker-compose

on:
  push:
    branches: [ "main" ]
#on: workflow_dispatch

jobs:
  deploy-to-ec2:
    environment: prod
    runs-on: ubuntu-latest
    steps:
      - name: github 체크아웃
        uses: actions/checkout@v3

      - name: jdk 세팅
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: gradle 빌드하기
        uses: gradle/gradle-build-action@v2
        with:
          arguments: build

      - name: docker 애뮬레이터(== VM, 하이퍼바이저) 설정
        uses: docker/setup-qemu-action@v2

      - name: docker Buildx 설정 (멀티 플랫폼 빌드)
        uses: docker/setup-buildx-action@v2

      - name: docker hub에 로그인
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: docker 빌드하고 푸쉬까지
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY }}:${{ secrets.DOCKER_TAG }}
          platforms: linux/arm64

      # --------------------------------------------------------------------------------------------------

      - name: docker-compose에서 사용할 .env 파일 만들기
        run: |
          cd ./deploy/prod
          echo '#!/bin/sh' >> .env
          echo 'DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}' >> .env
          echo 'DOCKER_REPOSITORY=${{ secrets.DOCKER_REPOSITORY }}' >> .env
          echo 'DOCKER_TAG=${{ secrets.DOCKER_TAG }}' >> .env

      - name: docker-compose > spring 컨테이너에서 사용할 spring.env 파일 만들기
        run: |
          cd ./deploy/prod
          echo '#!/bin/sh' >> spring.env
          echo 'MY_SECRET=${{ secrets.MY_SECRET }}' >> spring.env

      # https://github.com/appleboy/scp-action
      - name: EC2에 배포 관련 파일 전송하기
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_INSTANCE_HOST }}
          port: ${{ secrets.EC2_INSTANCE_PORT }}
          username: ${{ secrets.EC2_INSTANCE_USERNAME }}
          key: ${{ secrets.EC2_INSTANCE_PRIVATE_KEY }}
          source: "./deploy/prod/*" # github action 서버 내부 경로
          target: "/srv/deploy"     # ec2 서버 내부 경로
          strip_components: 1       # 덮어쓰기할 file depth

#      - name: EC2에 원격 접속 후 배포하기
#        uses: appleboy/ssh-action@master
#        with:
#          host: ${{ secrets.EC2_INSTANCE_HOST }}
#          port: ${{ secrets.EC2_INSTANCE_PORT }}
#          username: ${{ secrets.EC2_INSTANCE_USERNAME }}
#          key: ${{ secrets.EC2_INSTANCE_PRIVATE_KEY }}
#          script: |
#            docker pull ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY }}:${{ secrets.DOCKER_TAG }}
#            docker-compose -p compose-prod down
#            docker-compose -p compose-prod up -d
#            docker image prune -f
